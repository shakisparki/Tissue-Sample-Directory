'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SamplesDb")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Inserttb_collection(instance As tb_collection)
    End Sub
  Partial Private Sub Updatetb_collection(instance As tb_collection)
    End Sub
  Partial Private Sub Deletetb_collection(instance As tb_collection)
    End Sub
  Partial Private Sub Inserttb_sample(instance As tb_sample)
    End Sub
  Partial Private Sub Updatetb_sample(instance As tb_sample)
    End Sub
  Partial Private Sub Deletetb_sample(instance As tb_sample)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SamplesDbConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tb_collections() As System.Data.Linq.Table(Of tb_collection)
		Get
			Return Me.GetTable(Of tb_collection)
		End Get
	End Property
	
	Public ReadOnly Property tb_samples() As System.Data.Linq.Table(Of tb_sample)
		Get
			Return Me.GetTable(Of tb_sample)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tb_collection")>  _
Partial Public Class tb_collection
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Term As String
	
	Private _Title As String
	
	Private _tb_samples As EntitySet(Of tb_sample)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTermChanging(value As String)
    End Sub
    Partial Private Sub OnTermChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tb_samples = New EntitySet(Of tb_sample)(AddressOf Me.attach_tb_samples, AddressOf Me.detach_tb_samples)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term", DbType:="NVarChar(50)")>  _
	Public Property Term() As String
		Get
			Return Me._Term
		End Get
		Set
			If (String.Equals(Me._Term, value) = false) Then
				Me.OnTermChanging(value)
				Me.SendPropertyChanging
				Me._Term = value
				Me.SendPropertyChanged("Term")
				Me.OnTermChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(MAX)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tb_collection_tb_sample", Storage:="_tb_samples", ThisKey:="Id", OtherKey:="Collection_Id")>  _
	Public Property tb_samples() As EntitySet(Of tb_sample)
		Get
			Return Me._tb_samples
		End Get
		Set
			Me._tb_samples.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tb_samples(ByVal entity As tb_sample)
		Me.SendPropertyChanging
		entity.tb_collection = Me
	End Sub
	
	Private Sub detach_tb_samples(ByVal entity As tb_sample)
		Me.SendPropertyChanging
		entity.tb_collection = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tb_samples")>  _
Partial Public Class tb_sample
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Collection_Id As Integer
	
	Private _Donor_Count As System.Nullable(Of Integer)
	
	Private _Material_Type As String
	
	Private _Last_Updated As System.Nullable(Of Date)
	
	Private _tb_collection As EntityRef(Of tb_collection)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCollection_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCollection_IdChanged()
    End Sub
    Partial Private Sub OnDonor_CountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDonor_CountChanged()
    End Sub
    Partial Private Sub OnMaterial_TypeChanging(value As String)
    End Sub
    Partial Private Sub OnMaterial_TypeChanged()
    End Sub
    Partial Private Sub OnLast_UpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLast_UpdatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tb_collection = CType(Nothing, EntityRef(Of tb_collection))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Collection_Id", DbType:="Int NOT NULL")>  _
	Public Property Collection_Id() As Integer
		Get
			Return Me._Collection_Id
		End Get
		Set
			If ((Me._Collection_Id = value)  _
						= false) Then
				If Me._tb_collection.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCollection_IdChanging(value)
				Me.SendPropertyChanging
				Me._Collection_Id = value
				Me.SendPropertyChanged("Collection_Id")
				Me.OnCollection_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Donor_Count", DbType:="Int")>  _
	Public Property Donor_Count() As System.Nullable(Of Integer)
		Get
			Return Me._Donor_Count
		End Get
		Set
			If (Me._Donor_Count.Equals(value) = false) Then
				Me.OnDonor_CountChanging(value)
				Me.SendPropertyChanging
				Me._Donor_Count = value
				Me.SendPropertyChanged("Donor_Count")
				Me.OnDonor_CountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Material_Type", DbType:="NVarChar(50)")>  _
	Public Property Material_Type() As String
		Get
			Return Me._Material_Type
		End Get
		Set
			If (String.Equals(Me._Material_Type, value) = false) Then
				Me.OnMaterial_TypeChanging(value)
				Me.SendPropertyChanging
				Me._Material_Type = value
				Me.SendPropertyChanged("Material_Type")
				Me.OnMaterial_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Last_Updated", DbType:="Date")>  _
	Public Property Last_Updated() As System.Nullable(Of Date)
		Get
			Return Me._Last_Updated
		End Get
		Set
			If (Me._Last_Updated.Equals(value) = false) Then
				Me.OnLast_UpdatedChanging(value)
				Me.SendPropertyChanging
				Me._Last_Updated = value
				Me.SendPropertyChanged("Last_Updated")
				Me.OnLast_UpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tb_collection_tb_sample", Storage:="_tb_collection", ThisKey:="Collection_Id", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property tb_collection() As tb_collection
		Get
			Return Me._tb_collection.Entity
		End Get
		Set
			Dim previousValue As tb_collection = Me._tb_collection.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tb_collection.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tb_collection.Entity = Nothing
					previousValue.tb_samples.Remove(Me)
				End If
				Me._tb_collection.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tb_samples.Add(Me)
					Me._Collection_Id = value.Id
				Else
					Me._Collection_Id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tb_collection")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
